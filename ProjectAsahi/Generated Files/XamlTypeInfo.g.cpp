//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "App.xaml.h"
#include "GamePages\GamePlayPage.xaml.h"
#include "GamePages\LogoPage.xaml.h"
#include "GamePages\MenuPage.xaml.h"
#include "GamePages\SavePage.xaml.h"
#include "DirectXPage.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "App.g.hpp"
#include "GamePages\GamePlayPage.g.hpp"
#include "GamePages\LogoPage.g.hpp"
#include "GamePages\MenuPage.g.hpp"
#include "GamePages\SavePage.g.hpp"
#include "DirectXPage.g.hpp"


::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Visibility")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Object")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Int32")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"String")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Boolean")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Single")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"ProjectAsahi.DirectXPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"ProjectAsahi.DirectXPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::ProjectAsahi::DirectXPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"ProjectAsahi.GamePlayPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"ProjectAsahi.GamePlayPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::ProjectAsahi::GamePlayPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"ProjectAsahi.LogoPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"ProjectAsahi.LogoPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::ProjectAsahi::LogoPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"ProjectAsahi.MenuPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"ProjectAsahi.MenuPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::ProjectAsahi::MenuPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"ProjectAsahi.SavePage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"ProjectAsahi.SavePage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::ProjectAsahi::SavePage(); 
            };
        userType->AddMemberName(L"LoadVisibility");
        userType->AddMemberName(L"SaveVisibility");
        userType->AddMemberName(L"SaveList");
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"Windows.Foundation.Collections.IObservableVector`1<FileManager.Model.SaveModel>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"Windows.Foundation.Collections.IObservableVector`1<FileManager.Model.SaveModel>", nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](::Platform::Object^ instance, ::Platform::Object^ item) -> void
            {
                auto collection = (::Windows::Foundation::Collections::IObservableVector<::FileManager::Model::SaveModel^>^)instance;
                auto newItem = (::FileManager::Model::SaveModel^)item;
                collection->Append(newItem);
            };
        userType->SetIsReturnTypeStub();
        return userType;
    }


    if (typeName == L"FileManager.Model.SaveModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"FileManager.Model.SaveModel", this->GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::FileManager::Model::SaveModel(); 
            };
        userType->AddMemberName(L"SaveIndex");
        userType->AddMemberName(L"CurrentFilePath");
        userType->AddMemberName(L"BackgroundPath");
        userType->AddMemberName(L"BGMPath");
        userType->AddMemberName(L"BlockPosition");
        userType->AddMemberName(L"IsMultipleLanguage");
        userType->AddMemberName(L"NextFilePath");
        userType->AddMemberName(L"CharaList");
        userType->AddMemberName(L"SaveTime");
        return userType;
    }


    if (typeName == L"Windows.Foundation.Collections.IVector`1<FileManager.Model.CharaModel>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"Windows.Foundation.Collections.IVector`1<FileManager.Model.CharaModel>", nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](::Platform::Object^ instance, ::Platform::Object^ item) -> void
            {
                auto collection = (::Windows::Foundation::Collections::IVector<::FileManager::Model::CharaModel^>^)instance;
                auto newItem = (::FileManager::Model::CharaModel^)item;
                collection->Append(newItem);
            };
        userType->SetIsReturnTypeStub();
        return userType;
    }


    if (typeName == L"FileManager.Model.CharaModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"FileManager.Model.CharaModel", this->GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::FileManager::Model::CharaModel(); 
            };
        userType->AddMemberName(L"Position_X");
        userType->AddMemberName(L"Position_Y");
        userType->AddMemberName(L"Name");
        userType->AddMemberName(L"FilePath");
        userType->AddMemberName(L"Deep");
        return userType;
    }


    return nullptr;
    }

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"ProjectAsahi.SavePage.LoadVisibility")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"LoadVisibility", L"Windows.UI.Xaml.Visibility");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::ProjectAsahi::SavePage^)instance;
                auto value = ref new ::Platform::Box<::Windows::UI::Xaml::Visibility>(that->LoadVisibility);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"ProjectAsahi.SavePage.SaveVisibility")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SaveVisibility", L"Windows.UI.Xaml.Visibility");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::ProjectAsahi::SavePage^)instance;
                auto value = ref new ::Platform::Box<::Windows::UI::Xaml::Visibility>(that->SaveVisibility);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"ProjectAsahi.SavePage.SaveList")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SaveList", L"Windows.Foundation.Collections.IObservableVector`1<FileManager.Model.SaveModel>");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::ProjectAsahi::SavePage^)instance;
                return that->SaveList;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::ProjectAsahi::SavePage^)instance;
                that->SaveList = (::Windows::Foundation::Collections::IObservableVector<::FileManager::Model::SaveModel^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.SaveIndex")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SaveIndex", L"Int32");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->SaveIndex);
                return value;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->SaveIndex = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.CurrentFilePath")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CurrentFilePath", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                return that->CurrentFilePath;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                that->CurrentFilePath = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.BackgroundPath")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"BackgroundPath", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                return that->BackgroundPath;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                that->BackgroundPath = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.BGMPath")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"BGMPath", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                return that->BGMPath;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                that->BGMPath = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.BlockPosition")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"BlockPosition", L"Int32");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->BlockPosition);
                return value;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->BlockPosition = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.IsMultipleLanguage")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsMultipleLanguage", L"Boolean");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsMultipleLanguage);
                return value;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->IsMultipleLanguage = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.NextFilePath")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"NextFilePath", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                return that->NextFilePath;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                that->NextFilePath = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.CharaList")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CharaList", L"Windows.Foundation.Collections.IVector`1<FileManager.Model.CharaModel>");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                return that->CharaList;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                that->CharaList = (::Windows::Foundation::Collections::IVector<::FileManager::Model::CharaModel^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.CharaModel.Position_X")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Position_X", L"Single");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                auto value = ref new ::Platform::Box<::default::float32>(that->Position_X);
                return value;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::float32>^)value;
                that->Position_X = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.CharaModel.Position_Y")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Position_Y", L"Single");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                auto value = ref new ::Platform::Box<::default::float32>(that->Position_Y);
                return value;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::float32>^)value;
                that->Position_Y = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.CharaModel.Name")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                return that->Name;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                that->Name = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.CharaModel.FilePath")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FilePath", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                return that->FilePath;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                that->FilePath = (::Platform::String^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.CharaModel.Deep")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Deep", L"Int32");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->Deep);
                return value;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::CharaModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->Deep = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"FileManager.Model.SaveModel.SaveTime")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SaveTime", L"String");
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                return that->SaveTime;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::FileManager::Model::SaveModel^)instance;
                that->SaveTime = (::Platform::String^)value;
            };
        return xamlMember;
    }

    return nullptr;
}

